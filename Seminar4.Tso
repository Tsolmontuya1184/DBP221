{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6b67e9a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([79, 89, 69, 59, 99, 65, 78, 97, 54, 68])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1\n",
    "import numpy as np\n",
    "\n",
    "data1 = [79, 89, 69, 59, 99, 65, 78, 97, 54, 68]\n",
    "arr1 = np.array(data1)\n",
    "arr1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "432ad8df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6,\n",
       "       6, 6, 6, 6, 6, 6, 6, 6])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2\n",
    "import numpy as np\n",
    "\n",
    "data1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n",
    "arr1 = np.array(data1)\n",
    "arr1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8a3f56ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[20 21 22 23]\n",
      " [24 25 26 27]\n",
      " [28 29 30 31]]\n"
     ]
    }
   ],
   "source": [
    "#3\n",
    "import numpy as np\n",
    "\n",
    "data1 = np.arange(20, 32)\n",
    "a = np.reshape(data1 , (3,4), 'C')\n",
    "print (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e8466b48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 1],\n",
       "       [0, 1, 0],\n",
       "       [1, 0, 0]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#4\n",
    "import numpy as np\n",
    "\n",
    "arr=np.array ([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c8c5096f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 1],\n",
       "       [0, 0, 0, 2, 0],\n",
       "       [0, 0, 3, 0, 0],\n",
       "       [0, 4, 0, 0, 0],\n",
       "       [5, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5\n",
    "import numpy as np\n",
    "\n",
    "arr=np.array ([[0, 0, 0, 0, 1], [0, 0, 0, 2, 0], [0, 0 ,3, 0, 0], [0, 4, 0, 0, 0], [5, 0, 0, 0, 0]])\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b49c1a6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3, 5, 7, 9],\n",
       "       [2, 4, 6, 8]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#6\n",
    "import numpy as np\n",
    "\n",
    "data6 = [[3, 5, 7, 9], [2, 4, 6, 8]]\n",
    "arr6= np.array(data6)\n",
    "arr6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3bba0d05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of1row:1\n",
      "Sum of1row:3\n",
      "Sum of2row:4\n",
      "Sum of2row:9\n"
     ]
    }
   ],
   "source": [
    "#7\n",
    "a= [[1, 2], [4, 5]]\n",
    "rows = len (a);\n",
    "cols = len(a);\n",
    "for i in range (0, rows):\n",
    "    sumRow = 0;\n",
    "    for j in range(0, cols):\n",
    "        sumRow = sumRow + a [i][j];\n",
    "        print(\"Sum of\" + str(i+1)+\"row:\" + str(sumRow));\n",
    "        \n",
    "    for i in range(0, rows)\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2aa4d0d2",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'numpy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-ceaff64b4400>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mSeasons\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"2015\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2016\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2017\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2018\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2019\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2020\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2021\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mSdict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"2015\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2016\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2017\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2018\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2019\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2020\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"2021\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#player\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'numpy'"
     ]
    }
   ],
   "source": [
    "#8\n",
    "import numpy as np\n",
    "Seasons = [\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\"]\n",
    "Sdict = {\"2015\":0,\"2016\":1,\"2017\":2,\"2018\":3,\"2019\":4,\"2020\":5,\"2021\":6}\n",
    "#player\n",
    "Players = [\"KobeBryant\",\"JoeJohnson\",\"LeBronJames\",\"CarmeloAnthony\",\"DwightHoward\",\"ChrisBosh\",\"ChrisPaul\",\"KevinDurant\",\"DerrickRose\",\"DwayneWade\"]\n",
    "Pdict = {\"KobeBryant\":0,\"JoeJohnson\":1,\"LeBronJames\":2,\"CarmeloAnthony\":3,\"DwightHoward\":4,\"ChrisBosh\":5,\"ChrisPaul\":6,\"KevinDurant\":7,\"DerrickRose\":8,\"DwayneWade\":9}\n",
    "#salary\n",
    "KobeBryant_Salary = [25000000,0,0,0,0,0,0]\n",
    "JoeJohnson_Salary = [22309344,11000000,10254904,0,0,0,0]\n",
    "LeBronJames_Salary = [22970500,30963450,33285709,35654150,37436858,39219566,41180000]\n",
    "CarmeloAnthony_Salary = [22875000,24559380,26243760,2393887,2159029,2564753,2641691]\n",
    "DwightHoward_Salary = [22359364,23500000,23500000,24256725,2564753,2564753,2641691]\n",
    "ChrisBosh_Salary = [22192730, 23741060, 25289390, 26837720, 0,0,0]\n",
    "ChrisPaul_Salary = [21468695, 22868827,24268959, 35654150, 38506482, 41358814, 30800000]\n",
    "KevinDurant_Salary = [21971850,26540100,25000000,30000000,37199000,40108950,42018900]\n",
    "DerrickRose_Salary = [21323252,2116955,416533,2176260,7317074,7682926,13445120]\n",
    "DwayneWade_Salary = [20000000,23200000,15550000,2328652,2393887,2391886,2393887]\n",
    "Salary = np.array([KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary])\n",
    "#Games\n",
    "KobeBryant_G = [66,0,0,0,0,0,0]\n",
    "JoeJohnson_G = [81,78,55,0,0,0,1]\n",
    "LeBronJames_G = [76,74,82,55,67,45,46]\n",
    "CarmeloAnthony_G = [72,74,78,10,58,69,56]\n",
    "DwightHoward_G = [71,74,81,9,69,69,47]\n",
    "ChrisBosh_G = [31,32,0,0,0,0,0]\n",
    "ChrisPaul_G = [74,61,58,58,70,70,58]\n",
    "KevinDurant_G = [72,62,68,78,0,35,38]\n",
    "DerrickRose_G = [66,64,25,51,50,50,26]\n",
    "DwayneWade_G = [74,60,67,46,21,72,0]\n",
    "Games = np.array([KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary])\n",
    "##Minutes Played\n",
    "KobeBryant_MP = [1861,0,0,0,0,0,0]\n",
    "JoeJohnson_MP = [2705,1932,768,1840,1204,700,506]\n",
    "LeBronJames_MP = [2706,2797,3026,1936,2318,1503,1693]\n",
    "CarmeloAnthony_MP = [2527,2538,2504,294,1902,1691,1495]\n",
    "DwightHoward_MP = [2279,2198,2462,230,1304,1194,691]\n",
    "ChrisBosh_MP = [1755,0,0,0,0,0,0]\n",
    "ChrisPaul_MP = [2419,1921,1844,1856,2205,2198,1914]\n",
    "KevinDurant_MP = [2577,2070,2325,2698,0,1158,1387]\n",
    "DerrickRose_MP = [2098,2080,420,1392,1300,1280,637]\n",
    "DwayneWade_MP = [2257,1794,1534,1067,466,1886]\n",
    "Minutes_Played = np.array([KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary])\n",
    "### Points\n",
    "#Points\n",
    "KobeBryant_PTS = [1161,0,0,0,0,0,0]\n",
    "JoeJohnson_PTS = [992,715,372,0,0,0,2]\n",
    "LeBronJames_PTS = [1920,1954,2251,1505,1698,1126,1353]\n",
    "CarmeloAnthony_PTS = [1573,1659,1261,134,895,924,767]\n",
    "DwightHoward_PTS = [976,1002,1347,115,517,482,249]\n",
    "ChrisBosh_PTS = [1010,0,0,0,0,0,0]\n",
    "ChrisPaul_PTS = [1446,1104,1081,906,1232,1149,86]\n",
    "KevinDurant_PTS = [2029,1555,1792,2027,0,943,0]\n",
    "DerrickRose_PTS = [1080,1154,209,917,904,734,311]\n",
    "DwayneWade_PTS = [1409,1096,765,1,0,0,0]\n",
    "#Matrix\n",
    "Points = np.array([KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS])             \n",
    "#Field Goals\n",
    "KobeBryant_FG = [398,0,0,0,0,0,0]\n",
    "JoeJohnson_FG = [377,273,146,0,0,0]\n",
    "LeBronJames_FG = [737,736,857,558,643,422,509]\n",
    "CarmeloAnthony_FG = [567,602,472,49,336,327,263]\n",
    "DwightHoward_FG = [372,388,506,43,202,178,91]\n",
    "ChrisBosh_FG = [358,0,0,0,0,0,0]\n",
    "ChrisPaul_FG = [515,374,367,302,434,439,325]\n",
    "KevinDurant_FG = [698,551,630,721,0,324,407]\n",
    "DerrickRose_FG = [447,460,81,363,369,287,122]\n",
    "DwayneWade_FG = [540,414,299,416,0,0,0]\n",
    "Field_Goal = np.array([KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS])\n",
    "#Field Goal Attempts\n",
    "KobeBryant_FGA = [1113,0,0,0,0,0,0]\n",
    "JoeJohnson_FGA = [859,626,360,0,0,0,0]\n",
    "LeBronJames_FGA = [1416,1344,1580,1095,1303,823,976]\n",
    "CarmeloAnthony_FGA = [1307,1389,1168,121,782,777,589]\n",
    "DwightHoward_FGA = [600,613,911,69,277,303,150]\n",
    "ChrisBosh_FGA = [767,0,0,0,0,0,0]\n",
    "ChrisPaul_FGA = [1114,785,798,720,887,879,667]\n",
    "KevinDurant_FGA = [1381,1026,1222,1383,0,603,784]\n",
    "DerrickRose_FGA = [1048,977,186,753,753,611,274]\n",
    "DwayneWade_FGA = [1183,955,682,960,0,0,0]\n",
    "Field_Goal_attempt = np.array([KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS])\n",
    "#Salary\n",
    "print(Salary.sum(axis = 0))\n",
    "print(Salary.sum(axis = 1))\n",
    "#Games\n",
    "print(Games.sum(axis = 1))\n",
    "print(Games.sum(axis = 0))\n",
    "#Points\n",
    "print(Points.sum(axis = 0))\n",
    "print(Points.sum(axis = 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "sophisticated-apache",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
